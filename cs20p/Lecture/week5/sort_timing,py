"""
Experimentally timing some sort algorithms.
"""

__author__ = 'Jeffrey Bergamini for CS 20P, jeffrey.bergamini@cabrillo.edu'

import matplotlib.pyplot
import random
import timeit


def bubble_sort(data):
  """ Performs a standard bubble sort on data. """
  swapped = True
  while swapped:
    swapped = False
    for i in range(len(data) - 1):
      if data[i + 1] < data[i]:
        data[i], data[i + 1] = data[i + 1], data[i]
        swapped = True


def selection_sort(data):
  """ Performs a standard selection sort on data. """
  for first_unsorted in range(len(data) - 1):
    lowest = first_unsorted
    for check in range(first_unsorted + 1, len(data)):
      if data[check] < data[lowest]:
        lowest = check
    data[first_unsorted], data[lowest] = data[lowest], data[first_unsorted]


for stmt in 'bubble_sort(random_data)', 'selection_sort(random_data)', 'random_data.sort()':
  x_values = []
  y_values = []
  for n in (2 ** i for i in range(10, 17)):
    random_data = [random.randint(0, n) for _ in range(n)]  # Uniform distribution of random values
    timing = timeit.timeit(stmt=stmt, globals=globals(), number=1)
    x_values.append(n)
    y_values.append(timing)
  figure, axes = matplotlib.pyplot.subplots()
  axes.plot(x_values, y_values)
  axes.set(xlabel='n', ylabel='time (s)', title=stmt)
  axes.grid()
  figure.savefig(f"{stmt}.png")